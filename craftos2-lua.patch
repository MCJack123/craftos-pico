diff -ruN craftos2-lua/include/lua.h craftos2-lua.old/include/lua.h
--- craftos2-lua/include/lua.h	2021-05-27 20:06:37.000000000 -0400
+++ craftos2-lua.old/include/lua.h	2021-05-24 21:49:59.000000000 -0400
@@ -8,6 +8,7 @@
 
 #ifndef lua_h
 #define lua_h
+#define CRAFTOS2_LUA
 
 #include <stdarg.h>
 #include <stddef.h>
diff -ruN craftos2-lua/src/linit.c craftos2-lua.old/src/linit.c
--- craftos2-lua/src/linit.c	2021-05-27 20:06:38.000000000 -0400
+++ craftos2-lua.old/src/linit.c	2021-05-27 00:46:50.000000000 -0400
@@ -16,15 +16,15 @@
 
 static const luaL_Reg lualibs[] = {
   {"", luaopen_base},
-  {LUA_LOADLIBNAME, luaopen_package},
+  //{LUA_LOADLIBNAME, luaopen_package},
   {LUA_TABLIBNAME, luaopen_table},
-  {LUA_IOLIBNAME, luaopen_io},
-  {LUA_OSLIBNAME, luaopen_os},
+  //{LUA_IOLIBNAME, luaopen_io},
+  //{LUA_OSLIBNAME, luaopen_os},
   {LUA_STRLIBNAME, luaopen_string},
   {LUA_MATHLIBNAME, luaopen_math},
-  {LUA_DBLIBNAME, luaopen_debug},
-  {LUA_UTF8LIBNAME, luaopen_utf8},
-  {LUA_BITLIBNAME, luaopen_bit32},
+  //{LUA_DBLIBNAME, luaopen_debug},
+  //{LUA_UTF8LIBNAME, luaopen_utf8},
+  //{LUA_BITLIBNAME, luaopen_bit32},
   {NULL, NULL}
 };
 
diff -ruN craftos2-lua/src/llimits.h craftos2-lua.old/src/llimits.h
--- craftos2-lua/src/llimits.h	2021-05-27 20:06:38.000000000 -0400
+++ craftos2-lua.old/src/llimits.h	2021-05-25 00:47:38.000000000 -0400
@@ -106,10 +106,10 @@
 #endif
 
 /* Use external C++ locks to help with multi-threading */
-extern void _lua_lock(lua_State *L);
+/*extern void _lua_lock(lua_State *L);
 extern void _lua_unlock(lua_State *L);
 #define lua_lock _lua_lock
-#define lua_unlock _lua_unlock
+#define lua_unlock _lua_unlock*/
 
 #ifndef lua_lock
 #define lua_lock(L)     ((void) 0) 
diff -ruN craftos2-lua/src/lstate.c craftos2-lua.old/src/lstate.c
--- craftos2-lua/src/lstate.c	2021-05-27 20:06:38.000000000 -0400
+++ craftos2-lua.old/src/lstate.c	2021-05-25 00:48:34.000000000 -0400
@@ -38,8 +38,8 @@
 } LG;
   
 /* forward declarations for lock creation/deletion */
-void * _lua_newlock();
-void _lua_freelock(void *);
+//void * _lua_newlock();
+//void _lua_freelock(void *);
 
 static void stack_init (lua_State *L1, lua_State *L) {
   /* initialize CallInfo array */
@@ -117,7 +117,7 @@
   freestack(L, L);
   lua_assert(g->totalbytes == sizeof(LG));
   if (g->lockstate) lua_unlock(L);
-  _lua_freelock(g->lock);
+  //_lua_freelock(g->lock);
   (*g->frealloc)(g->ud, fromstate(L), state_size(LG), 0);
 }
 
@@ -184,7 +184,7 @@
   g->gcpause = LUAI_GCPAUSE;
   g->gcstepmul = LUAI_GCMUL;
   g->gcdept = 0;
-  g->lock = _lua_newlock();
+  //g->lock = _lua_newlock();
   g->lockstate = 0;
   g->haltstate = 0;
   for (i=0; i<NUM_TAGS; i++) g->mt[i] = NULL;
